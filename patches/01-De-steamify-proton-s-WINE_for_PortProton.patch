 /******************************************************************************
diff --git a/dlls/kernelbase/process.c b/dlls/kernelbase/process.c
index 7ea75b58a..526a0fdee 100644
--- a/dlls/kernelbase/process.c
+++ b/dlls/kernelbase/process.c
@@ -1300,21 +1300,6 @@ HANDLE WINAPI DECLSPEC_HOTPATCH OpenProcess( DWORD access, BOOL inherit, DWORD i
     attr.SecurityDescriptor = NULL;
     attr.SecurityQualityOfService = NULL;

-    /* PROTON HACK:
-     * On Windows, the Steam client puts its process ID into the registry
-     * at:
-     *
-     *   [HKCU\Software\Valve\Steam\ActiveProcess]
-     *   PID=dword:00000008
-     *
-     * Games get that pid from the registry and then query it with
-     * OpenProcess to ensure Steam is running. Since we aren't running the
-     * Windows Steam in Wine, instead we hack this magic number into the
-     * registry and then substitute the game's process itself in its place
-     * so it can query a valid process.
-     */
-    if (id == 0xfffe) id = GetCurrentProcessId();
-
     cid.UniqueProcess = ULongToHandle(id);
     cid.UniqueThread  = 0;

diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
index 8dfe4e21e..073eb2cd6 100644
--- a/dlls/ntdll/loader.c
+++ b/dlls/ntdll/loader.c
@@ -90,7 +90,7 @@ const WCHAR windows_dir[] = L"C:\\windows";
 const WCHAR system_dir[] = L"C:\\windows\\system32\\";

 /* system search path */
-static const WCHAR system_path[] = L"C:\\windows\\system32;C:\\windows\\system;C:\\windows;C:\\Program Files (x86)\\Steam";
+static const WCHAR system_path[] = L"C:\\windows\\system32;C:\\windows\\system;C:\\windows";

 static BOOL is_prefix_bootstrap;  /* are we bootstrapping the prefix? */
 static BOOL imports_fixup_done = FALSE;  /* set once the imports have been fixed up, before attaching them */
@@ -2196,19 +2196,6 @@ static NTSTATUS perform_relocations( void *module, IMAGE_NT_HEADERS *nt, SIZE_T
     return STATUS_SUCCESS;
 }

-static int use_lsteamclient(void)
-{
-    WCHAR env[32];
-    static int use = -1;
-
-    if (use != -1) return use;
-
-    use = !get_env( L"PROTON_DISABLE_LSTEAMCLIENT", env, sizeof(env) ) || *env == '0';
-    if (!use)
-        ERR("lsteamclient disabled.\n");
-    return use;
-}
-
 /*************************************************************************
  *		build_module
  *
@@ -2219,16 +2206,12 @@ static NTSTATUS build_module( LPCWSTR load_path, const UNICODE_STRING *nt_name,
                               DWORD flags, BOOL system, WINE_MODREF **pwm )
 {
     static const char builtin_signature[] = "Wine builtin DLL";
-    static HMODULE lsteamclient = NULL;
     char *signature = (char *)((IMAGE_DOS_HEADER *)*module + 1);
-    UNICODE_STRING lsteamclient_us;
     BOOL is_builtin;
     IMAGE_NT_HEADERS *nt;
     WINE_MODREF *wm;
     NTSTATUS status;
     SIZE_T map_size;
-    WCHAR *basename, *tmp;
-    ULONG basename_len;

     if (!(nt = RtlImageNtHeader( *module ))) return STATUS_INVALID_IMAGE_FORMAT;

@@ -2249,25 +2232,6 @@ static NTSTATUS build_module( LPCWSTR load_path, const UNICODE_STRING *nt_name,

     update_load_config( *module );

-    basename = nt_name->Buffer;
-    if ((tmp = wcsrchr(basename, '\\'))) basename = tmp + 1;
-    if ((tmp = wcsrchr(basename, '/'))) basename = tmp + 1;
-    basename_len = wcslen(basename);
-    if (basename_len >= 4 && !wcscmp(basename + basename_len - 4, L".dll")) basename_len -= 4;
-
-    if (use_lsteamclient() && (!RtlCompareUnicodeStrings(basename, basename_len, L"steamclient", 11, TRUE) ||
-         !RtlCompareUnicodeStrings(basename, basename_len, L"steamclient64", 13, TRUE) ||
-         !RtlCompareUnicodeStrings(basename, basename_len, L"gameoverlayrenderer", 19, TRUE) ||
-         !RtlCompareUnicodeStrings(basename, basename_len, L"gameoverlayrenderer64", 21, TRUE)) &&
-        RtlCreateUnicodeStringFromAsciiz(&lsteamclient_us, "lsteamclient.dll") &&
-        (lsteamclient || LdrLoadDll(load_path, 0, &lsteamclient_us, &lsteamclient) == STATUS_SUCCESS))
-    {
-        struct steamclient_setup_trampolines_params params = {.src_mod = *module, .tgt_mod = lsteamclient};
-        WINE_UNIX_CALL( unix_steamclient_setup_trampolines, &params );
-        wm->ldr.Flags |= LDR_DONT_RESOLVE_REFS;
-        flags |= DONT_RESOLVE_DLL_REFERENCES;
-    }
-
     /* fixup imports */

     if (!(flags & DONT_RESOLVE_DLL_REFERENCES) &&
diff --git a/dlls/ntdll/unix/env.c b/dlls/ntdll/unix/env.c
index c2c46dd0a..29f5aa2b1 100644
--- a/dlls/ntdll/unix/env.c
+++ b/dlls/ntdll/unix/env.c
@@ -2507,7 +2507,6 @@ void WINAPI RtlSetLastWin32Error( DWORD err )
  */
 NTSTATUS WINAPI __wine_set_unix_env( const char *var, const char *val )
 {
-    if (!val) unsetenv(var);
-    else setenv(var, val, 1);
+    setenv(var, val, 1);
     return 0;
 }
diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index b7d1f6772..993bd61b0 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -592,47 +592,12 @@ NTSTATUS exec_wineloader( char **argv, int socketfd, const pe_image_info_t *pe_i
     WORD machine = pe_info->machine;
     ULONGLONG res_start = pe_info->base;
     ULONGLONG res_end = pe_info->base + pe_info->map_size;
-    const char *ld_preload = getenv( "LD_PRELOAD" );
+
     char preloader_reserve[64], socket_env[64];

     if (pe_info->wine_fakedll) res_start = res_end = 0;
     if (pe_info->image_flags & IMAGE_FLAGS_ComPlusNativeReady) machine = native_machine;

-    unsetenv( "WINE_LD_PRELOAD" );
-
-    /* HACK: Unset LD_PRELOAD before executing explorer.exe to disable buggy gameoverlayrenderer.so */
-    if (ld_preload && argv[2] && !strcmp( argv[2], "C:\\windows\\system32\\explorer.exe" ) &&
-        argv[3] && !strcmp( argv[3], "/desktop" ))
-    {
-        static char const gorso[] = "gameoverlayrenderer.so";
-        static int gorso_len = sizeof(gorso) - 1;
-        int len = strlen( ld_preload );
-        char *next, *tmp, *env = malloc( sizeof("LD_PRELOAD=") + len );
-
-        if (!env) return STATUS_NO_MEMORY;
-        strcpy( env, "LD_PRELOAD=" );
-        strcat( env, ld_preload );
-
-        tmp = env + 11;
-        do
-        {
-            if (!(next = strchr( tmp, ':' ))) next = tmp + strlen( tmp );
-            if (next - tmp >= gorso_len && strncmp( next - gorso_len, gorso, gorso_len ) == 0)
-            {
-                if (*next) memmove( tmp, next + 1, strlen(next) );
-                else *tmp = 0;
-                next = tmp;
-            }
-            else tmp = next + 1;
-        }
-        while (*next);
-
-        putenv( env );
-        ld_preload = NULL;
-    }
-
-    if (ld_preload) setenv( "WINE_LD_PRELOAD", ld_preload, 1 );
-
     signal( SIGPIPE, SIG_DFL );

     snprintf( socket_env, sizeof(socket_env), "WINESERVERSOCKET=%u", socketfd );
@@ -1052,96 +1017,6 @@ static NTSTATUS load_so_dll( void *args )
     return status;
 }

-static void *steamclient_srcs[128];
-static void *steamclient_tgts[128];
-static int steamclient_count;
-
-void *steamclient_handle_fault( LPCVOID addr, DWORD err )
-{
-    int i;
-
-    if (!(err & EXCEPTION_EXECUTE_FAULT)) return NULL;
-
-    for (i = 0; i < steamclient_count; ++i)
-    {
-        if (addr == steamclient_srcs[i])
-            return steamclient_tgts[i];
-    }
-
-    return NULL;
-}
-
-static void steamclient_write_jump(void *src_addr, void *tgt_addr)
-{
-#ifdef _WIN64
-    static const char mov[] = {0x48, 0xb8};
-#else
-    static const char mov[] = {0xb8};
-#endif
-    static const char jmp[] = {0xff, 0xe0};
-    memcpy(src_addr, mov, sizeof(mov));
-    memcpy((char *)src_addr + sizeof(mov), &tgt_addr, sizeof(tgt_addr));
-    memcpy((char *)src_addr + sizeof(mov) + sizeof(tgt_addr), jmp, sizeof(jmp));
-}
-
-static NTSTATUS steamclient_setup_trampolines( void *args )
-{
-    static int noexec_cached = -1;
-    struct steamclient_setup_trampolines_params *params = args;
-    HMODULE src_mod = params->src_mod, tgt_mod = params->tgt_mod;
-    SYSTEM_BASIC_INFORMATION info;
-    IMAGE_NT_HEADERS *src_nt = (IMAGE_NT_HEADERS *)((UINT_PTR)src_mod + ((IMAGE_DOS_HEADER *)src_mod)->e_lfanew);
-    IMAGE_NT_HEADERS *tgt_nt = (IMAGE_NT_HEADERS *)((UINT_PTR)tgt_mod + ((IMAGE_DOS_HEADER *)tgt_mod)->e_lfanew);
-    IMAGE_SECTION_HEADER *src_sec = (IMAGE_SECTION_HEADER *)(src_nt + 1);
-    const IMAGE_EXPORT_DIRECTORY *src_exp, *tgt_exp;
-    const DWORD *names;
-    SIZE_T size;
-    void *addr, *src_addr, *tgt_addr;
-    char *name, *wsne;
-    UINT_PTR page_mask;
-    int i;
-
-    if (noexec_cached == -1)
-        noexec_cached = (wsne = getenv("WINESTEAMNOEXEC")) && atoi(wsne);
-
-    virtual_get_system_info( &info, !!NtCurrentTeb()->WowTebOffset );
-    page_mask = info.PageSize - 1;
-
-    for (i = 0; i < src_nt->FileHeader.NumberOfSections; ++i)
-    {
-        if (memcmp(src_sec[i].Name, ".text", 5)) continue;
-        addr = (void *)(((UINT_PTR)src_mod + src_sec[i].VirtualAddress) & ~page_mask);
-        size = (src_sec[i].Misc.VirtualSize + page_mask) & ~page_mask;
-        if (noexec_cached) mprotect(addr, size, PROT_READ);
-        else mprotect(addr, size, PROT_READ|PROT_WRITE|PROT_EXEC);
-    }
-
-    src_exp = get_module_data_dir( src_mod, IMAGE_FILE_EXPORT_DIRECTORY, NULL );
-    tgt_exp = get_module_data_dir( tgt_mod, IMAGE_FILE_EXPORT_DIRECTORY, NULL );
-    names = (const DWORD *)((UINT_PTR)src_mod + src_exp->AddressOfNames);
-    for (i = 0; i < src_exp->NumberOfNames; ++i)
-    {
-        if (!names[i] || !(name = (char *)((UINT_PTR)src_mod + names[i]))) continue;
-        if (!(src_addr = (void *)find_named_export(src_mod, src_exp, name))) continue;
-        if (!(tgt_addr = (void *)find_named_export(tgt_mod, tgt_exp, name))) continue;
-        assert(steamclient_count < ARRAY_SIZE(steamclient_srcs));
-        steamclient_srcs[steamclient_count] = src_addr;
-        steamclient_tgts[steamclient_count] = tgt_addr;
-        if (!noexec_cached) steamclient_write_jump(src_addr, tgt_addr);
-        else steamclient_count++;
-    }
-
-    src_addr = (void *)((UINT_PTR)src_mod + src_nt->OptionalHeader.AddressOfEntryPoint);
-    tgt_addr = (void *)((UINT_PTR)tgt_mod + tgt_nt->OptionalHeader.AddressOfEntryPoint);
-    assert(steamclient_count < ARRAY_SIZE(steamclient_srcs));
-    steamclient_srcs[steamclient_count] = src_addr;
-    steamclient_tgts[steamclient_count] = tgt_addr;
-    if (!noexec_cached) steamclient_write_jump(src_addr, tgt_addr);
-    else steamclient_count++;
-
-    return STATUS_SUCCESS;
-}
-
 static BOOL debugstr_pc_impl( void *pc, char *buffer, unsigned int size )
 {
     unsigned int len;
@@ -1203,7 +1078,6 @@ static const unixlib_entry_t unix_call_funcs[] =
     unixcall_wine_server_handle_to_fd,
     unixcall_wine_spawnvp,
     system_time_precise,
-    steamclient_setup_trampolines,
     is_pc_in_native_so,
     debugstr_pc,
 };
diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
index 5b7d46037..32dcfa6d3 100644
--- a/dlls/ntdll/unix/signal_i386.c
+++ b/dlls/ntdll/unix/signal_i386.c
@@ -1928,7 +1928,6 @@ static void segv_handler( int signal, siginfo_t *siginfo, void *sigcontext )
     struct xcontext xcontext;
     ucontext_t *ucontext = sigcontext;
     void *stack = setup_exception_record( sigcontext, &rec, &xcontext );
-    void *steamclient_addr = NULL;

     switch (TRAP_sig(ucontext))
     {
@@ -1963,12 +1962,6 @@ static void segv_handler( int signal, siginfo_t *siginfo, void *sigcontext )
         }
         break;
     case TRAP_x86_PAGEFLT:  /* Page fault */
-        if ((steamclient_addr = steamclient_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09 )))
-        {
-            EIP_sig(ucontext) = (intptr_t)steamclient_addr;
-            return;
-        }
-
         rec.NumberParameters = 2;
         rec.ExceptionInformation[0] = (ERROR_sig(ucontext) >> 1) & 0x09;
         rec.ExceptionInformation[1] = (ULONG_PTR)siginfo->si_addr;
diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index f0467def5..dcb0c465c 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -2268,7 +2268,6 @@ static void segv_handler( int signal, siginfo_t *siginfo, void *sigcontext )
     EXCEPTION_RECORD rec = { 0 };
     struct xcontext context;
     ucontext_t *ucontext = init_handler( sigcontext );
-    void *steamclient_addr = NULL;

     rec.ExceptionAddress = (void *)RIP_sig(ucontext);
     save_context( &context, ucontext );
@@ -2300,12 +2299,6 @@ static void segv_handler( int signal, siginfo_t *siginfo, void *sigcontext )
         }
         break;
     case TRAP_x86_PAGEFLT:  /* Page fault */
-        if ((steamclient_addr = steamclient_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09 )))
-        {
-            RIP_sig(ucontext) = (intptr_t)steamclient_addr;
-            return;
-        }
-
         rec.NumberParameters = 2;
         rec.ExceptionInformation[0] = (ERROR_sig(ucontext) >> 1) & 0x09;
         rec.ExceptionInformation[1] = (ULONG_PTR)siginfo->si_addr;
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index cf6b9ab0c..15de3bd68 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -242,7 +242,6 @@ extern unsigned int alloc_object_attributes( const OBJECT_ATTRIBUTES *attr, stru
                                              data_size_t *ret_len );
 extern NTSTATUS system_time_precise( void *args );

-extern void *steamclient_handle_fault( LPCVOID addr, DWORD err );
 extern void *anon_mmap_fixed( void *start, size_t size, int prot, int flags );
 extern void *anon_mmap_alloc( size_t size, int prot );
 extern void virtual_init(void);
diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
index e0870584a..94abe3450 100644
--- a/dlls/ntdll/unixlib.h
+++ b/dlls/ntdll/unixlib.h
@@ -66,12 +66,6 @@ struct unwind_builtin_dll_params
     CONTEXT                    *context;
 };

-struct steamclient_setup_trampolines_params
-{
-    HMODULE src_mod;
-    HMODULE tgt_mod;
-};
-
 struct debugstr_pc_args
 {
     void *pc;
@@ -89,7 +83,6 @@ enum ntdll_unix_funcs
     unix_wine_server_handle_to_fd,
     unix_wine_spawnvp,
     unix_system_time_precise,
-    unix_steamclient_setup_trampolines,
     unix_is_pc_in_native_so,
     unix_debugstr_pc,
 };

diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index db51152e1..172263b92 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -1060,19 +1060,8 @@ static void set_initial_wm_hints( Display *display, Window window )
     /* class hints */
     if ((class_hints = XAllocClassHint()))
     {
-        static char steam_proton[] = "steam_proton";
-        const char *app_id = getenv("SteamAppId");
-        char proton_app_class[128];
-
-        if(app_id && *app_id){
-            snprintf(proton_app_class, sizeof(proton_app_class), "steam_app_%s", app_id);
-            class_hints->res_name = proton_app_class;
-            class_hints->res_class = proton_app_class;
-        }else{
-            class_hints->res_name = steam_proton;
-            class_hints->res_class = steam_proton;
-        }
-
+        class_hints->res_name = process_name;
+        class_hints->res_class = process_name;
         XSetClassHint( display, window, class_hints );
         XFree( class_hints );
     }
diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 1e5b16a53..d1e99538b 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -98,8 +98,7 @@ AddReg=\
     VersionInfo,\
     LicenseInformation,\
     NVIDIANGX, \
-    ProtonOverrides,\
-    SteamClient
+    ProtonOverrides

 [DefaultInstall.ntamd64]
 RegisterDlls=RegisterDllsSection
@@ -127,8 +126,7 @@ AddReg=\
     VersionInfo,\
     LicenseInformation,\
     NVIDIANGX, \
-    ProtonOverrides,\
-    SteamClient.ntamd64
+    ProtonOverrides

 [DefaultInstall.ntarm64]
 RegisterDlls=RegisterDllsSection
@@ -172,8 +170,7 @@ AddReg=\
     VersionInfo,\
     LicenseInformation,\
     NVIDIANGX, \
-    ProtonOverrides,\
-    SteamClient.ntamd64
+    ProtonOverrides

 [Wow64Install.ntarm]
 RegisterDlls=RegisterDllsSection
@@ -351,7 +348,6 @@ HKCR,ftp\shell\open\command,,2,"""%11%\winebrowser.exe"" ""%1"""
 HKCR,http\shell\open\command,,2,"""%11%\winebrowser.exe"" ""%1"""
 HKCR,https\shell\open\command,,2,"""%11%\winebrowser.exe"" ""%1"""
 HKCR,mailto\shell\open\command,,2,"""%11%\winebrowser.exe"" ""%1"""
-HKCR,steam\shell\open\command,,,"""%16426%\Steam\Steam.exe"" -- ""%1"""

 [ContentIndex]
 HKLM,System\CurrentControlSet\Control\ContentIndex\Language\Neutral,"WBreakerClass",,"{369647e0-17b0-11ce-9950-00aa004bbb1f}"
@@ -2817,22 +2812,6 @@ InfFiles  = 17
 NlsFiles  = 11
 SortFiles = 10,globalization\sorting

-[SteamClient]
-HKCU,Software\Valve\Steam,"SteamPath",,"%16422%\Steam"
-HKCU,Software\Valve\Steam,"SteamExe",,"%16422%\Steam\Steam.exe"
-HKCU,Software\Valve\Steam\ActiveProcess,"PID",0x10001,0x0000fffe
-HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll",,"%16422%\Steam\steamclient.dll"
-HKCU,Software\Valve\Steam\ActiveProcess,"SteamPath",,"%16422%\Steam"
-
-[SteamClient.ntamd64]
-HKCU,Software\Valve\Steam,"SteamPath",,"%16422%\Steam"
-HKCU,Software\Valve\Steam,"SteamExe",,"%16422%\Steam\Steam.exe"
-HKCU,Software\Valve\Steam\ActiveProcess,"PID",0x10001,0x0000fffe
-HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll",,"%16426%\Steam\steamclient.dll"
-HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll64",,"%16426%\Steam\steamclient64.dll"
-HKCU,Software\Valve\Steam\ActiveProcess,"SteamPath",,"%16426%\Steam"
-HKLM,Software\Wow6432Node\Valve\Steam,"InstallPath",,"%16422%\Steam"
-
 [NVIDIANGX]
 HKLM,Software\NVIDIA Corporation\Global\NGXCore,"FullPath",,"C:\Windows\System32"

diff --git a/programs/winebrowser/main.c b/programs/winebrowser/main.c
index 738930e39..244160701 100644
--- a/programs/winebrowser/main.c
+++ b/programs/winebrowser/main.c
@@ -63,17 +63,6 @@ static char *strdup_unixcp( const WCHAR *str )
     return ret;
 }

-static void restore_system_environment(void)
-{
-    const char* orig_ld_path = getenv("ORIG_LD_LIBRARY_PATH");
-
-    if (orig_ld_path)
-    {
-        __wine_set_unix_env("LD_LIBRARY_PATH", orig_ld_path);
-        __wine_set_unix_env("ORIG_LD_LIBRARY_PATH", NULL);
-    }
-}
-
 /* try to launch a unix app from a comma separated string of app names */
 static int launch_app( const WCHAR *candidates, const WCHAR *argv1 )
 {
@@ -83,11 +72,6 @@ static int launch_app( const WCHAR *candidates, const WCHAR *argv1 )

     if (!(cmdline = strdup_unixcp( argv1 ))) return 1;

-    /* PROTON HACK: Restore ORIG_LD_LIBRARY_PATH to LD_LIBRARY_PATH.
-     * System programs may not work correctly with our libraries, in
-     * particular gio on Ubuntu 19.04 is broken by our libgio. */
-    restore_system_environment();
-
     while (*candidates)
     {
         WCHAR **args = CommandLineToArgvW( candidates, &count );
diff --git a/programs/winedbg/debugger.h b/programs/winedbg/debugger.h
index 74c935f42..c65b9bfae 100644
--- a/programs/winedbg/debugger.h
+++ b/programs/winedbg/debugger.h
@@ -311,8 +311,6 @@ extern	DWORD	                dbg_curr_tid;
 extern  dbg_ctx_t               dbg_context;
 extern  BOOL                    dbg_interactiveP;
 extern  HANDLE                  dbg_houtput;
-extern  HANDLE                  dbg_crash_report_file;
-extern  BOOL                    dbg_use_wine_dbg_output;

 struct dbg_internal_var
 {
diff --git a/programs/winedbg/tgt_active.c b/programs/winedbg/tgt_active.c
index 23652b777..175788571 100644
--- a/programs/winedbg/tgt_active.c
+++ b/programs/winedbg/tgt_active.c
@@ -22,8 +22,6 @@
 #include <stdio.h>
 #include <string.h>
 #include <stdarg.h>
-#include <time.h>
-#include <sys/stat.h>

 #include "debugger.h"
 #include "psapi.h"
@@ -818,48 +816,6 @@ static HANDLE create_temp_file(void)
                         NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_DELETE_ON_CLOSE, 0 );
 }

-static HANDLE create_crash_report_file(void)
-{
-    const char *dir = getenv("WINE_CRASH_REPORT_DIR");
-    const char *sgi;
-    char timestr[32];
-    char name[MAX_PATH], *c;
-    time_t t;
-    struct tm lt;
-
-    if(!dir || dir[0] == 0)
-        return INVALID_HANDLE_VALUE;
-
-    strcpy(name, dir);
-
-    for(c = name + 1; *c; ++c){
-        if(*c == '/'){
-            *c = 0;
-            CreateDirectoryA(name, NULL);
-            *c = '/';
-        }
-    }
-    CreateDirectoryA(name, NULL);
-
-    sgi = getenv("SteamGameId");
-
-    t = time(NULL);
-    lt = *localtime(&t);
-    strftime(timestr, ARRAY_SIZE(timestr), "%Y-%m-%d_%H:%M:%S", &lt);
-
-    /* /path/to/crash/reports/2021-05-18_13:21:15_appid-976310_crash.log */
-    snprintf(name, ARRAY_SIZE(name),
-            "%s%s/%s_appid-%s_crash.log",
-            dir[0] == '/' ? "Z:/" : "",
-            dir,
-            timestr,
-            sgi ? sgi : "0"
-            );
-
-    return CreateFileA( name, GENERIC_WRITE, FILE_SHARE_READ,
-                        NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0 );
-}
-
 /******************************************************************
  *		dbg_active_attach
  *
@@ -951,10 +907,6 @@ enum dbg_start dbg_active_auto(int argc, char* argv[])
         if (event) thread = display_crash_details( event );
         if (thread) dbg_houtput = output = create_temp_file();
         break;
-    case TRUE:
-        dbg_use_wine_dbg_output = TRUE;
-        dbg_crash_report_file = create_crash_report_file();
-        break;
     }

     input = parser_generate_command_file("echo Modules:", "info share",
diff --git a/programs/winedbg/winedbg.c b/programs/winedbg/winedbg.c
index 7769d2048..92fa77429 100644
--- a/programs/winedbg/winedbg.c
+++ b/programs/winedbg/winedbg.c
@@ -82,8 +82,6 @@ DWORD	                dbg_curr_pid = 0;
 dbg_ctx_t               dbg_context;
 BOOL    	        dbg_interactiveP = FALSE;
 HANDLE                  dbg_houtput = 0;
-HANDLE                  dbg_crash_report_file = INVALID_HANDLE_VALUE;
-BOOL                    dbg_use_wine_dbg_output = FALSE;

 static struct list      dbg_process_list = LIST_INIT(dbg_process_list);

@@ -96,9 +94,6 @@ static void dbg_outputA(const char* buffer, int len)

     DWORD w, i;

-    if (dbg_use_wine_dbg_output)
-        __wine_dbg_output(buffer);
-
     while (len > 0)
     {
         unsigned int count = min( len, sizeof(line_buff) - line_pos );
@@ -112,10 +107,7 @@ static void dbg_outputA(const char* buffer, int len)
             if (len > 0) i = line_pos;  /* buffer is full, flush anyway */
             else break;
         }
-        if (!dbg_use_wine_dbg_output)
-            WriteFile(dbg_houtput, line_buff, i, &w, NULL);
-        if (dbg_crash_report_file != INVALID_HANDLE_VALUE)
-            WriteFile(dbg_crash_report_file, line_buff, i, &w, NULL);
+        WriteFile(dbg_houtput, line_buff, i, &w, NULL);
         memmove( line_buff, line_buff + i, line_pos - i );
         line_pos -= i;
     }

